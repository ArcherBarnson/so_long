/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parsing.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bgrulois <bgrulois@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/06/21 12:00:11 by bgrulois          #+#    #+#             */
/*   Updated: 2022/06/29 17:17:58 by bgrulois         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	verify_walls(t_mlx_global *so_long)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	if (verify_first_line(so_long) == -1)
		return (-1);
	while (so_long->map_split[++i] != NULL)
	{
		while (so_long->map_split[i][j])
			j++;
		if (so_long->map_split[i][0] != '1'
			&& so_long->map_split[i][j - 2] != '1')
			return (-1);
		j++;
	}
	while (so_long->map_split[i - 1][j] && so_long->map_split[i - 1][j] != '\n')
	{
		if (so_long->map_split[i - 1][j] != '1')
			return (-1);
	}
	return (0);
}

int	verify_tiles(t_mlx_global *so_long)
{
	int	i;
	int	j;

	i = -1;
	j = 0;
	while (so_long->map_split[++i])
	{
		while (so_long->map_split[i][++j] && so_long->map_split[i][j] != '\n')
		{
			if (so_long->map_split[i][j] == 'P')
				so_long->P++;
			else if (so_long->map_split[i][j] == 'E')
				so_long->E++;
			else if (so_long->map_split[i][j] == 'C')
				so_long->C++;
			if (is_char_in_str(so_long->map_split[i][j], TILES) == 0)
				return (-1);
		}
		j = 0;
	}
	if (verify_tiles_values(so_long->P, so_long->E, so_long->C) == -1)
		return (-1);
	return (0);
}

int	global_check(t_mlx_global *so_long)
{
	int	error;

	error = 0;
	if (verify_walls(so_long) == -1)
	{
		write(2, "Your map isn't closed !\n", 24);
		error = -1;
	}
	if (verify_tiles(so_long) == -1)
	{
		write(2, "Invalid tile(s)\n", 16);
		error = -1;
	}
	return (error);
}

t_mlx_global	*ft_parsing(char *map_file, t_mlx_global *so_long)
{
	int	i;
	int	len;

	i = count_lines(map_file);
	(void)map_file;
	//map_file = NULL;
	//so_long->map_split = NULL;
	printf("fd==>%i\nfilename==>%s\n", so_long->map_fd, map_file);
	//so_long->map_fd = open(map_file, O_RDONLY);
	if (so_long->map_fd == -1)
		return (NULL);
	i = 0;
	so_long->map_split[0] = get_next_line(so_long->map_fd);
	len = get_line_size(so_long->map_split[0]);
	while (so_long->map_split[i] != NULL)
	{
		so_long->map_split[i + 1] = get_next_line(so_long->map_fd);
		if (get_line_size(so_long->map_split[i]) != len)
			return (NULL);
		i++;
	}
	so_long->map_split[i] = NULL;
	if (global_check(so_long) == -1)
		return (NULL);
	return (so_long);
}
